// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"game-server-golang/internal/domain"
	"game-server-golang/internal/gateway"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(msg string) {
	_mock.Called(msg)
	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
func (_e *MockLogger_Expecter) Debug(msg interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug", msg)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(msg string)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(msg string) {
	_mock.Called(msg)
	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
func (_e *MockLogger_Expecter) Error(msg interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error", msg)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(msg string)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(msg string) {
	_mock.Called(msg)
	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
func (_e *MockLogger_Expecter) Info(msg interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info", msg)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(msg string)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLogger
func (_mock *MockLogger) Warn(msg string) {
	_mock.Called(msg)
	return
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
func (_e *MockLogger_Expecter) Warn(msg interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn", msg)}
}

func (_c *MockLogger_Warn_Call) Run(run func(msg string)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(msg string)) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// WithField provides a mock function for the type MockLogger
func (_mock *MockLogger) WithField(key string, value any) gateway.Logger {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for WithField")
	}

	var r0 gateway.Logger
	if returnFunc, ok := ret.Get(0).(func(string, any) gateway.Logger); ok {
		r0 = returnFunc(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gateway.Logger)
		}
	}
	return r0
}

// MockLogger_WithField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithField'
type MockLogger_WithField_Call struct {
	*mock.Call
}

// WithField is a helper method to define mock.On call
//   - key string
//   - value any
func (_e *MockLogger_Expecter) WithField(key interface{}, value interface{}) *MockLogger_WithField_Call {
	return &MockLogger_WithField_Call{Call: _e.mock.On("WithField", key, value)}
}

func (_c *MockLogger_WithField_Call) Run(run func(key string, value any)) *MockLogger_WithField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLogger_WithField_Call) Return(logger gateway.Logger) *MockLogger_WithField_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *MockLogger_WithField_Call) RunAndReturn(run func(key string, value any) gateway.Logger) *MockLogger_WithField_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function for the type MockLogger
func (_mock *MockLogger) WithFields(fields map[string]any) gateway.Logger {
	ret := _mock.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 gateway.Logger
	if returnFunc, ok := ret.Get(0).(func(map[string]any) gateway.Logger); ok {
		r0 = returnFunc(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gateway.Logger)
		}
	}
	return r0
}

// MockLogger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type MockLogger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields map[string]any
func (_e *MockLogger_Expecter) WithFields(fields interface{}) *MockLogger_WithFields_Call {
	return &MockLogger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *MockLogger_WithFields_Call) Run(run func(fields map[string]any)) *MockLogger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]any
		if args[0] != nil {
			arg0 = args[0].(map[string]any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithFields_Call) Return(logger gateway.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *MockLogger_WithFields_Call) RunAndReturn(run func(fields map[string]any) gateway.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerRepository creates a new instance of MockPlayerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerRepository {
	mock := &MockPlayerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlayerRepository is an autogenerated mock type for the PlayerRepository type
type MockPlayerRepository struct {
	mock.Mock
}

type MockPlayerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerRepository) EXPECT() *MockPlayerRepository_Expecter {
	return &MockPlayerRepository_Expecter{mock: &_m.Mock}
}

// CreatePlayer provides a mock function for the type MockPlayerRepository
func (_mock *MockPlayerRepository) CreatePlayer(player domain.Player) error {
	ret := _mock.Called(player)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlayer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Player) error); ok {
		r0 = returnFunc(player)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlayerRepository_CreatePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlayer'
type MockPlayerRepository_CreatePlayer_Call struct {
	*mock.Call
}

// CreatePlayer is a helper method to define mock.On call
//   - player domain.Player
func (_e *MockPlayerRepository_Expecter) CreatePlayer(player interface{}) *MockPlayerRepository_CreatePlayer_Call {
	return &MockPlayerRepository_CreatePlayer_Call{Call: _e.mock.On("CreatePlayer", player)}
}

func (_c *MockPlayerRepository_CreatePlayer_Call) Run(run func(player domain.Player)) *MockPlayerRepository_CreatePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Player
		if args[0] != nil {
			arg0 = args[0].(domain.Player)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlayerRepository_CreatePlayer_Call) Return(err error) *MockPlayerRepository_CreatePlayer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlayerRepository_CreatePlayer_Call) RunAndReturn(run func(player domain.Player) error) *MockPlayerRepository_CreatePlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayer provides a mock function for the type MockPlayerRepository
func (_mock *MockPlayerRepository) GetPlayer(publicId uuid.UUID) (*domain.Player, error) {
	ret := _mock.Called(publicId)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayer")
	}

	var r0 *domain.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*domain.Player, error)); ok {
		return returnFunc(publicId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *domain.Player); ok {
		r0 = returnFunc(publicId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Player)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(publicId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerRepository_GetPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayer'
type MockPlayerRepository_GetPlayer_Call struct {
	*mock.Call
}

// GetPlayer is a helper method to define mock.On call
//   - publicId uuid.UUID
func (_e *MockPlayerRepository_Expecter) GetPlayer(publicId interface{}) *MockPlayerRepository_GetPlayer_Call {
	return &MockPlayerRepository_GetPlayer_Call{Call: _e.mock.On("GetPlayer", publicId)}
}

func (_c *MockPlayerRepository_GetPlayer_Call) Run(run func(publicId uuid.UUID)) *MockPlayerRepository_GetPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlayerRepository_GetPlayer_Call) Return(player *domain.Player, err error) *MockPlayerRepository_GetPlayer_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockPlayerRepository_GetPlayer_Call) RunAndReturn(run func(publicId uuid.UUID) (*domain.Player, error)) *MockPlayerRepository_GetPlayer_Call {
	_c.Call.Return(run)
	return _c
}
