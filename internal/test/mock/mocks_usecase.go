// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"game-server-golang/internal/domain"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPlayerUsecase creates a new instance of MockPlayerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerUsecase {
	mock := &MockPlayerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlayerUsecase is an autogenerated mock type for the PlayerUsecase type
type MockPlayerUsecase struct {
	mock.Mock
}

type MockPlayerUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerUsecase) EXPECT() *MockPlayerUsecase_Expecter {
	return &MockPlayerUsecase_Expecter{mock: &_m.Mock}
}

// CreatePlayer provides a mock function for the type MockPlayerUsecase
func (_mock *MockPlayerUsecase) CreatePlayer() (domain.Player, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreatePlayer")
	}

	var r0 domain.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (domain.Player, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() domain.Player); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.Player)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerUsecase_CreatePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlayer'
type MockPlayerUsecase_CreatePlayer_Call struct {
	*mock.Call
}

// CreatePlayer is a helper method to define mock.On call
func (_e *MockPlayerUsecase_Expecter) CreatePlayer() *MockPlayerUsecase_CreatePlayer_Call {
	return &MockPlayerUsecase_CreatePlayer_Call{Call: _e.mock.On("CreatePlayer")}
}

func (_c *MockPlayerUsecase_CreatePlayer_Call) Run(run func()) *MockPlayerUsecase_CreatePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPlayerUsecase_CreatePlayer_Call) Return(newPlayer domain.Player, err error) *MockPlayerUsecase_CreatePlayer_Call {
	_c.Call.Return(newPlayer, err)
	return _c
}

func (_c *MockPlayerUsecase_CreatePlayer_Call) RunAndReturn(run func() (domain.Player, error)) *MockPlayerUsecase_CreatePlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayer provides a mock function for the type MockPlayerUsecase
func (_mock *MockPlayerUsecase) GetPlayer(publicId uuid.UUID) (*domain.Player, error) {
	ret := _mock.Called(publicId)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayer")
	}

	var r0 *domain.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*domain.Player, error)); ok {
		return returnFunc(publicId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *domain.Player); ok {
		r0 = returnFunc(publicId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Player)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(publicId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerUsecase_GetPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayer'
type MockPlayerUsecase_GetPlayer_Call struct {
	*mock.Call
}

// GetPlayer is a helper method to define mock.On call
//   - publicId uuid.UUID
func (_e *MockPlayerUsecase_Expecter) GetPlayer(publicId interface{}) *MockPlayerUsecase_GetPlayer_Call {
	return &MockPlayerUsecase_GetPlayer_Call{Call: _e.mock.On("GetPlayer", publicId)}
}

func (_c *MockPlayerUsecase_GetPlayer_Call) Run(run func(publicId uuid.UUID)) *MockPlayerUsecase_GetPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPlayerUsecase_GetPlayer_Call) Return(player *domain.Player, err error) *MockPlayerUsecase_GetPlayer_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockPlayerUsecase_GetPlayer_Call) RunAndReturn(run func(publicId uuid.UUID) (*domain.Player, error)) *MockPlayerUsecase_GetPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityUsecase creates a new instance of MockSecurityUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityUsecase {
	mock := &MockSecurityUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecurityUsecase is an autogenerated mock type for the SecurityUsecase type
type MockSecurityUsecase struct {
	mock.Mock
}

type MockSecurityUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityUsecase) EXPECT() *MockSecurityUsecase_Expecter {
	return &MockSecurityUsecase_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function for the type MockSecurityUsecase
func (_mock *MockSecurityUsecase) Decrypt(message string) (string, error) {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(message)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityUsecase_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockSecurityUsecase_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - message string
func (_e *MockSecurityUsecase_Expecter) Decrypt(message interface{}) *MockSecurityUsecase_Decrypt_Call {
	return &MockSecurityUsecase_Decrypt_Call{Call: _e.mock.On("Decrypt", message)}
}

func (_c *MockSecurityUsecase_Decrypt_Call) Run(run func(message string)) *MockSecurityUsecase_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecurityUsecase_Decrypt_Call) Return(decryptedString string, err error) *MockSecurityUsecase_Decrypt_Call {
	_c.Call.Return(decryptedString, err)
	return _c
}

func (_c *MockSecurityUsecase_Decrypt_Call) RunAndReturn(run func(message string) (string, error)) *MockSecurityUsecase_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockSecurityUsecase
func (_mock *MockSecurityUsecase) Encrypt(message string) (string, error) {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(message)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityUsecase_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockSecurityUsecase_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - message string
func (_e *MockSecurityUsecase_Expecter) Encrypt(message interface{}) *MockSecurityUsecase_Encrypt_Call {
	return &MockSecurityUsecase_Encrypt_Call{Call: _e.mock.On("Encrypt", message)}
}

func (_c *MockSecurityUsecase_Encrypt_Call) Run(run func(message string)) *MockSecurityUsecase_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecurityUsecase_Encrypt_Call) Return(encryptedString string, err error) *MockSecurityUsecase_Encrypt_Call {
	_c.Call.Return(encryptedString, err)
	return _c
}

func (_c *MockSecurityUsecase_Encrypt_Call) RunAndReturn(run func(message string) (string, error)) *MockSecurityUsecase_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}
